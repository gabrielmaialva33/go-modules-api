openapi: 3.1.0
info:
  title: GoModule API
  version: 0.0.1
  description: |
    ## About
    This is the API documentation for the GoModule project. The API is used to manage the system's resources, such as users, products, and orders.

    ## Authentication
    The API uses JWT for authentication. To authenticate, you must send the `Authorization` header with the value `Bearer <token>`. The token is obtained by signing in to the system.

    ### Postman Post-Request Script
    You can use the following code to get a token in Postman:
    ```js
    var responseData = pm.response.json();
    var token = responseData.auth.access_token;
    pm.environment.set("bearerToken", token);
    ```

    <!-- ReDoc-Inject: <security-definitions> -->
  x-logo:
    url: ''
    altText: Logo
  contact:
    name: Gabriel M.
    email: gabrielmaialva33@gmail.com
    url: https://github.com/gabrielmaialva33
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:3000
    description: Local server
tags:
  - name: Health
    description: Operations related to system health
  - name: HubClients
    description: Operations related to hub clients
paths:
  /api/hub_clients:
    get:
      tags:
        - HubClients
      summary: List all hub clients
      description: |
        Returns a list of all hub clients.
      operationId: listHubClients
      responses:
        '200':
          description: A list of hub clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HubClient'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
    post:
      tags:
        - HubClients
      summary: Create a new hub client
      description: Creates a new hub client in the system.
      parameters:
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            default: application/json
          example: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HubClientInput'
      responses:
        '201':
          description: Hub client created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HubClient'
        '400':
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
        '500':
          description: Failed to create the hub client.
  /api/hub_clients/{id}:
    get:
      tags:
        - HubClients
      summary: Get hub client by ID
      description: Retrieves the details of a specific hub client using its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the hub client.
          schema:
            type: integer
      responses:
        '200':
          description: Hub client details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HubClient'
        '400':
          description: Invalid ID supplied.
        '404':
          description: Hub client not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: Failed to retrieve the hub client.
    put:
      tags:
        - HubClients
      summary: Update a hub client
      description: Updates the details of an existing hub client.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the hub client to update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HubClient'
      responses:
        '200':
          description: Hub client updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HubClient'
        '400':
          description: Invalid request or ID.
        '500':
          description: Failed to update the hub client.
    delete:
      tags:
        - HubClients
      summary: Delete a hub client
      description: Deletes a hub client with the given ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the hub client to delete.
          schema:
            type: integer
      responses:
        '204':
          description: Hub client deleted successfully.
        '400':
          description: Invalid ID supplied.
        '500':
          description: Failed to delete the hub client.
components:
  securitySchemes:
    bearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # errors
    Unauthorized:
      type: object
      properties:
        status:
          type: number
          description: The status code of the error.
          example: 401
        message:
          type: string
          description: The error message.
          example: Invalid user credentials
    NotFound:
      type: object
      properties:
        status:
          type: number
          description: The status code of the error.
          example: 404
        message:
          type: string
          description: The error message.
          example: Entity not found
    UnprocessableEntity:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
                description: The error message.
                example: The email has already been taken
              rule:
                type: string
                description: The rule that was broken.
                example: database.unique
              field:
                type: string
                description: The field that caused the error.
                example: email
            example:
              - {
                'message': 'The email has already been taken',
                'rule': 'database.unique',
                'field': 'email',
              }
              - {
                'message': 'The username has already been taken',
                'rule': 'database.unique',
                'field': 'username',
              }

    HubClient:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the hub client.
          example: 1
        name:
          type: string
          description: The name of the hub client.
          example: "Client A"
        created_at:
          type: string
          format: date-time
          description: When the hub client was created.
          example: "2025-02-01T18:08:26.599656-03:00"
        updated_at:
          type: string
          format: date-time
          description: When the hub client was last updated.
          example: "2025-02-01T18:08:26.599656-03:00"
      example: {
        'id': 1,
        'name': 'Client A',
        'created_at': '2025-02-01T18:08:26.599656-03:00',
        'updated_at': '2025-02-01T18:08:26.599656-03:00',
      }
    HubClientInput:
      type: object
      properties:
        name:
          type: string
          description: The name of the hub client.
          example: "Client A"
        external_id:
          type: integer
          description: The external ID of the hub client.
          example: 123
      example: {
        'name': 'Client A',
        'external_id': 123,
      }