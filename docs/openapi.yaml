openapi: 3.1.0
info:
  title: GoModule API
  version: 0.0.1
  description: |
    ## About
    This is the API documentation for the GoModule project. The API is used to manage the system's resources, such as users, products, and orders.

    ## Authentication
    The API uses JWT for authentication. To authenticate, you must send the `Authorization` header with the value `Bearer <token>`. The token is obtained by signing in to the system.

    ### Postman Post-Request Script
    You can use the following code to get a token in Postman:
    ```js
    var responseData = pm.response.json();
    var token = responseData.auth.access_token;
    pm.environment.set("bearerToken", token);
    ```

    <!-- ReDoc-Inject: <security-definitions> -->
  x-logo:
    url: 'https://raw.githubusercontent.com/gabrielmaialva33/go-modules-api/refs/heads/main/.github/assets/cubes.png'
    altText: Logo
  contact:
    name: Gabriel M.
    email: gabrielmaialva33@gmail.com
    url: https://github.com/gabrielmaialva33
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:3000
    description: Local server
tags:
  - name: Health
    description: Operations related to system health
  - name: HubClients
    description: Operations related to hub clients
  - name: Roles
    description: Operations related to roles
paths:
  # hub_clients
  /api/hub_clients/paginate:
    get:
      tags:
        - HubClients
      summary: Paginate hub clients
      description: Returns a paginated list of hub clients with sorting and filtering options.
      operationId: paginateHubClients
      parameters:
        - name: search
          in: query
          description: Filter by client name (partial match).
          schema:
            type: string
        - name: active
          in: query
          description: Filter by active status (`true` or `false`).
          schema:
            type: boolean
        - name: sort_field
          in: query
          description: Field to sort by.
          schema:
            type: string
            enum: [ id, name, active, external_id, created_at, updated_at ]
            default: id
        - name: sort_order
          in: query
          description: Sorting direction (`asc` or `desc`).
          schema:
            type: string
            enum: [ asc, desc ]
            default: asc
        - name: page
          in: query
          description: Page number (for pagination).
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of results per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Paginated list of hub clients.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/HubClient'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
  /api/hub_clients:
    get:
      tags:
        - HubClients
      summary: List hub clients
      description: |
        Returns a list of all hub clients.
      operationId: listHubClients
      parameters:
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            default: application/json
        - name: search
          in: query
          description: Filter by client name (partial match).
          schema:
            type: string
        - name: active
          in: query
          description: Filter by active status (`true` or `false`).
          schema:
            type: boolean
        - name: sort_field
          in: query
          description: Field to sort by.
          schema:
            type: string
            enum: [ id, name, active, external_id, created_at, updated_at ]
            default: id
        - name: sort_order
          in: query
          description: Sorting direction (`asc` or `desc`).
          schema:
            type: string
            enum: [ asc, desc ]
            default: asc
      responses:
        '200':
          description: A list of hub clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HubClient'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
    post:
      tags:
        - HubClients
      summary: Create hub client
      description: Creates a new hub client in the system.
      parameters:
        - name: Content-Type
          in: header
          required: true
          schema:
            type: string
            default: application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HubClientInput'
      responses:
        '201':
          description: Hub client created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HubClient'
        '400':
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
        '500':
          description: Failed to create the hub client.
  /api/hub_clients/{id}:
    get:
      tags:
        - HubClients
      summary: Get hub client
      description: Retrieves the details of a specific hub client using its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the hub client.
          schema:
            type: integer
      responses:
        '200':
          description: Hub client details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HubClient'
        '400':
          description: Invalid ID supplied.
        '404':
          description: Hub client not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: Failed to retrieve the hub client.
    put:
      tags:
        - HubClients
      summary: Update hub client
      description: Updates the details of an existing hub client.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the hub client to update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HubClient'
      responses:
        '200':
          description: Hub client updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HubClient'
        '400':
          description: Invalid request or ID.
        '500':
          description: Failed to update the hub client.
    delete:
      tags:
        - HubClients
      summary: Delete hub client
      description: Deletes a hub client with the given ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the hub client to delete.
          schema:
            type: integer
      responses:
        '204':
          description: Hub client deleted successfully.
        '400':
          description: Invalid ID supplied.
        '500':
          description: Failed to delete the hub client.

  # role
  /api/roles/paginate:
    get:
      tags:
        - Roles
      summary: Paginate roles
      description: Returns a paginated list of roles with filtering and sorting options.
      operationId: paginateRoles
      parameters:
        - name: search
          in: query
          description: Filter by role name (partial match).
          schema:
            type: string
        - name: active
          in: query
          description: Filter by active status (`true` or `false`).
          schema:
            type: boolean
        - name: sort_field
          in: query
          description: Field to sort by.
          schema:
            type: string
            enum: [ id, name, active, created_at, updated_at ]
            default: id
        - name: sort_order
          in: query
          description: Sorting direction (`asc` or `desc`).
          schema:
            type: string
            enum: [ asc, desc ]
            default: asc
        - name: page
          in: query
          description: Page number (for pagination).
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of results per page.
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Paginated list of roles.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
  /api/roles:
    get:
      tags:
        - Roles
      summary: List roles
      description: Returns a list of all roles in the system.
      operationId: listRoles
      parameters:
        - name: search
          in: query
          description: Filter by role name (partial match).
          schema:
            type: string
        - name: active
          in: query
          description: Filter by active status (`true` or `false`).
          schema:
            type: boolean
        - name: sort_field
          in: query
          description: Field to sort by.
          schema:
            type: string
            enum: [ id, name, active, created_at, updated_at ]
            default: id
        - name: sort_order
          in: query
          description: Sorting direction (`asc` or `desc`).
          schema:
            type: string
            enum: [ asc, desc ]
            default: asc
      responses:
        '200':
          description: List of roles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '401':
          description: Unauthorized.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
    post:
      tags:
        - Roles
      summary: Create role
      description: Creates a new role in the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleInput'
      responses:
        '201':
          description: Role created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnprocessableEntity'
        '500':
          description: Failed to create the role.
  /api/roles/{id}:
    get:
      tags:
        - Roles
      summary: Get role by ID
      description: Retrieves details of a specific role by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the role.
          schema:
            type: integer
      responses:
        '200':
          description: Role details retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid ID provided.
        '404':
          description: Role not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        '500':
          description: Failed to retrieve the role.
    put:
      tags:
        - Roles
      summary: Update role
      description: Updates details of an existing role.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the role to update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRoleInput'
      responses:
        '200':
          description: Role updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Invalid request or ID.
        '500':
          description: Failed to update the role.
    delete:
      tags:
        - Roles
      summary: Delete role
      description: Deletes a role by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the role to delete.
          schema:
            type: integer
      responses:
        '204':
          description: Role deleted successfully.
        '400':
          description: Invalid ID provided.
        '500':
          description: Failed to delete the role.

components:
  securitySchemes:
    bearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # exceptions
    Unauthorized:
      type: object
      properties:
        status:
          type: number
          description: The status code of the error.
          example: 401
        message:
          type: string
          description: The error message.
          example: Invalid user credentials
    NotFound:
      type: object
      properties:
        status:
          type: number
          description: The status code of the error.
          example: 404
        message:
          type: string
          description: The error message.
          example: Entity not found
    UnprocessableEntity:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
                description: The error message.
                example: The email has already been taken
              rule:
                type: string
                description: The rule that was broken.
                example: database.unique
              field:
                type: string
                description: The field that caused the error.
                example: email
            example:
              - {
                'message': 'The email has already been taken',
                'rule': 'database.unique',
                'field': 'email',
              }
              - {
                'message': 'The username has already been taken',
                'rule': 'database.unique',
                'field': 'username',
              }

    HubClient:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the hub client.
          example: 1
        name:
          type: string
          description: The name of the hub client.
          example: "Client A"
        external_id:
          type: string
          description: The external ID of the hub client.
          example: 123
        created_at:
          type: string
          format: date-time
          description: When the hub client was created.
          example: "2025-02-01T18:08:26.599656-03:00"
        updated_at:
          type: string
          format: date-time
          description: When the hub client was last updated.
          example: "2025-02-01T18:08:26.599656-03:00"
      example: {
        'id': 1,
        'name': 'Client A',
        'external_id': '123',
        'created_at': '2025-02-01T18:08:26.599656-03:00',
        'updated_at': '2025-02-01T18:08:26.599656-03:00',
      }
    HubClientInput:
      type: object
      properties:
        name:
          type: string
          description: The name of the hub client.
          example: "Client A"
        external_id:
          type: string
          description: The external ID of the hub client.
          example: 123
      example: {
        'name': 'Client A',
        'external_id': '123',
      }

    Role:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the role.
          example: 1
        name:
          type: string
          description: The name of the role.
          example: "Admin"
        slug:
          type: string
          description: The slug of the role.
          example: "admin"
        active:
          type: boolean
          description: Indicates whether the role is active.
          example: true
        created_at:
          type: string
          format: date-time
          description: When the role was created.
          example: "2025-02-01T18:08:26.599656-03:00"
        updated_at:
          type: string
          format: date-time
          description: When the role was last updated.
          example: "2025-02-01T18:08:26.599656-03:00"
      example: {
        'id': 1,
        'name': 'Admin',
        'slug': 'admin',
        'active': true,
        'created_at': '2025-02-01T18:08:26.599656-03:00',
        'updated_at': '2025-02-01T18:08:26.599656-03:00',
      }
    CreateRoleInput:
      type: object
      properties:
        name:
          type: string
          description: The name of the role.
          example: "Admin"
        slug:
          type: string
          description: The slug of the role.
          example: "admin"
      example: {
        'name': 'Admin',
        'slug': 'admin',
      }
    UpdateRoleInput:
      type: object
      properties:
        name:
          type: string
          description: The name of the role.
          example: "Admin"
        slug:
          type: string
          description: The slug of the role.
          example: "admin"
      example: {
        'name': 'Admin',
        'slug': 'admin',
      }


    PaginationMeta:
      type: object
      properties:
        total:
          type: integer
        current_page:
          type: integer
        per_page:
          type: integer
        total_pages:
          type: integer
        has_more:
          type: boolean
        has_previous:
          type: boolean
        is_empty:
          type: boolean
        first_page_url:
          type: string
        next_page_url:
          type: string
          nullable: true
        last_page_url:
          type: string
        previous_page_url:
          type: string
          nullable: true
